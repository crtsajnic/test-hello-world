#!/usr/bin/env node

/**
 * Module dependencies.
 */

var express = require('express');
var app = express();
var debug = require('debug')('test-hello-world:server');
var https = require('https');
var fs = require('fs');

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = https.createServer({
	key: fs.readFileSync('/root/test-hello-world/bin/test-tls.cer'),
  cert: fs.readFileSync('/root/test-hello-world/bin/test-tls.cer'),
  ca: fs.readFileSync('/root/test-hello-world/bin/test-tls.cer'),
	ciphers: [
 		'ECDHE-RSA-AES128-GCM-SHA256',
 		'ECDHE-ECDSA-AES128-GCM-SHA256',
 		'ECDHE-RSA-AES256-GCM-SHA384',
 		'ECDHE-ECDSA-AES256-GCM-SHA384',
 		'DHE-RSA-AES128-GCM-SHA256',
 		'ECDHE-RSA-AES128-SHA256',
 		'DHE-RSA-AES128-SHA256',
 		'ECDHE-RSA-AES256-SHA384',
 		'DHE-RSA-AES256-SHA384',
 		'ECDHE-RSA-AES256-SHA256',
 		'DHE-RSA-AES256-SHA256',
 		'HIGH',
 		'!aNULL',
 		'!eNULL',
 		'!EXPORT',
 		'!DES',
 		'!RC4',
 		'!MD5',
 		'!PSK',
 		'!SRP',
 		'!CAMELLIA'
	].join(':'),
	honorCipherOrder: true
}, app);

const fursUrl = {
	hostname: 'blagajne-test.fu.gov.si',
	port: 9007,
	path: '/v1/getInvoice?qr={qr}&apikey={apiKey}',
	method: 'GET',
	key: fs.readFileSync('/root/test-hello-world/bin/test-tls.cer'),
	cert: fs.readFileSync('/root/test-hello-world/bin/test-tls.cer'),
	secureProtocol: "TLSv1_2_method"
}

app.get('/qr', function (req, res, next) {
	const apiKey = 'ZaDEKtHoSdGa0P4TwWV3tm6FkwUo71GL';
	let qrCode = req.query.code;

	if (qrCode != null && qrCode.length == 4) {
		fursUrl.path = fursUrl.path.replace('{qr}', qrCode);
		fursUrl.path = fursUrl.path.replace('{apiKey}', apiKey);

		//console.log(fursUrl);

		const reqq = https.request(fursUrl, ress => {
			console.log(`statusCode: ${ress.statusCode}`)

			ress.on('data', d => {
				res.json(error);
			})
		})

		reqq.on('error', error => {
			console.log(error);
			res.json(error);
		})

		reqq.end()
	} else {
		res.json({ code: 234 });
	}
});



/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
